import React, { useEffect, useState } from 'react';import dayjs from 'dayjs'import * as mqtt from "mqtt"import { inject, observer, MobXProviderContext } from 'mobx-react'import { Spin, Icon, Input, Select, Button, message } from 'antd'import { API_SERVER } from '@/constant/apis'import Draggable from 'react-draggable';import style from './style.less';import * as urls from '@/constant/urls'import { serverUrl, SAV_TIME, SubRtg, saveData, cfList, sortData, groupData, mergeData } from './mqtt'import bg from '@/img/fac-bg.png'import act from '@/img/status-act.png'import war from '@/img/status-war.png'const g1 = [  { x: 743, y: 250, status: true },  { x: 790, y: 264, status: false },  { x: 837, y: 278, status: true },  { x: 884, y: 292, status: true },]const g2 = [  { x: 499, y: 464, status: false },  { x: 546, y: 478, status: true },  { x: 593, y: 492, status: true },  { x: 640, y: 506, status: true },]const Run = () => {  const { store } = React.useContext(MobXProviderContext)  const [loading, setLoading] = useState(false)  const [tp, setTp] = useState({})  const startMqtt = () => {    const client = mqtt.connect('ws://121.43.120.234:8080');    client.on("connect", () => {      console.log("服务器连接成功");      cfList.map(e => client.subscribe(SubRtg(e), {}))    })    client.on("message", (addr, msg) => {      let m = JSON.parse(msg.toString())      let data = m.devs[0].d      data.map(o => {        tp[o.m] = o.v      })      setTp({ ...tp })    })  }  useEffect(() => {    startMqtt()  }, []);  console.log(tp)  return (    <Spin spinning={loading}>      <div className="g-run">        <div className="m-bd">          <img src={bg} alt="" />          <div className="m-status">            {g1.map((o,i)=>               <img key={i} className="item-status" src={o.status?act:war} style={{left:o.x, top:o.y }} alt="" />            )}            {g2.map((o,i)=>               <img key={i} className="item-status" src={o.status?act:war} style={{left:o.x, top:o.y }} alt="" />            )}          </div>                    <div className="m-info m-info-1">            <div className="m-row">              <label>设备L1</label>              <span>传感器1</span><i>{tp?.tag1}℃</i>              <span>传感器2</span><i>34.1℃</i>            </div>            <div className="m-row">              <label>设备L2</label>              <span>传感器1</span><i>{tp?.tag2}℃</i>              <span>传感器2</span><i>34.1℃</i>            </div>            <div className="m-row">              <label>设备L3</label>              <span>传感器1</span><i>{tp?.tag3}℃</i>              <span>传感器2</span><i>34.1℃</i>            </div>            <div className="m-row">              <label>设备L4</label>              <span>传感器1</span><i>{tp?.tag4}℃</i>              <span>传感器2</span><i>34.1℃</i>            </div>          </div>          <div className="m-info m-info-2">            <div className="m-row">              <label>设备R1</label>              <span>传感器1</span><i>29.1℃</i>              <span>传感器2</span><i>34.1℃</i>            </div>            <div className="m-row">              <label>设备R2</label>              <span>传感器1</span><i>29.1℃</i>              <span>传感器2</span><i>34.1℃</i>            </div>            <div className="m-row">              <label>设备R3</label>              <span>传感器1</span><i>29.1℃</i>              <span>传感器2</span><i>34.1℃</i>            </div>            <div className="m-row">              <label>设备R4</label>              <span>传感器1</span><i>29.1℃</i>              <span>传感器2</span><i>34.1℃</i>            </div>          </div>        </div>      </div>    </Spin>  );}export default observer(Run)