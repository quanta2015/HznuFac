import React, { useEffect, useState, useRef } from 'react';import dayjs from 'dayjs'import { inject, observer, MobXProviderContext } from 'mobx-react'import { Spin, Icon, Input, Select, Button, message } from 'antd'import { isN, formatDtFromInt, caluPeriod } from '@/util/fn'// import { API_SERVER } from '@/constant/apis'import s from './index.module.less';import * as urls from '@/constant/urls'import { dateList } from '@/constant/data'import Highcharts from 'highcharts'import HighchartsReact from 'highcharts-react-official'import HC_more from 'highcharts/highcharts-more';import HC_exporting from 'highcharts/modules/exporting'import HC_exportData from 'highcharts/modules/export-data';const ViewHeight = () => {  var viewportHeight = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);  // console.log(viewportHeight, 'viewportHeight')  return viewportHeight - 121;}var opt = (title, cate, seri, minY) => {  return {    chart: {      type: 'line',      backgroundColor: 'transparent',      height: ViewHeight(),      zoomType: 'x',    },    title: {      text: null,      style: { color: '#fff' },    },    yAxis: {      gridLineWidth: 0,      // min: minY,      title: {        // text: null,        style: { color: '#fff' },      },      labels: { style: { color: '#fff' } },    },    xAxis: {      categories: cate,      gridLineWidth: 0,      title: {        text: null,        style: { color: '#fff' },      },      labels: { style: { color: '#fff' } },    },    legend: {      enabled: true,      itemStyle: {        color: '#FFFFFF',        fontSize: '15px',        fontFamily: 'microsoft yahei'      }    },    series: seri,    // colors: ['#2caffe', '#9b20d9', '#4c46db', '#ff6600', '#00f194']  }}const Run = () => {  const { store } = React.useContext(MobXProviderContext)  const [loading, setLoading] = useState(false)  const [isPlaying, setIsPlaying] = useState(false);  const [option, setOption] = useState(null)  const [sel, setSel] = useState(0)  const [fr, setFr] = useState(dayjs().startOf('day'))  const [to, setTo] = useState(dayjs().endOf('day'))  const [type, setType] = useState('day')  const [format, setFormat] = useState('MM-DD')  const caluChart = (ret) => {    let series = {};    let cate = ret.map(point => point.dt.toString().slice(0, -2));    ret.forEach(point => {      Object.keys(point).forEach(key => {        if (key.startsWith('tag')) {          series[key] = series[key] || [];          series[key].push(parseFloat(point[key]));        }      });    });    let seriesData = Object.keys(series).map(key => ({      name: key,      data: series[key]    }));    let minY = Math.min(...seriesData.flatMap(s => s.data.filter(v => !isNaN(v))));    let option = opt('new project', cate, seriesData, minY - 1)    setOption(option)  }  useEffect(() => {    const params = { fr: dayjs(fr).format('YYYYMMDDHHmmss'), to: dayjs(to).format('YYYYMMDDHHmmss') }    setLoading(true)    store.queryHistory(params).then(r => {      setLoading(false)      caluChart(r)    })  }, [fr, to]);  const doSelRange = (e, sel) => {    const { fr, to, type, format } = caluPeriod(e)    setSel(sel)    setFr(fr)    setTo(to)    setType(type)    setFormat(format)  }  const doQuery = () => {    let params = { fr: dayjs(fr).format('YYYYMMDDHHmmss'), to: dayjs(to).format('YYYYMMDDHHmmss') }    // console.log(params)    setLoading(true)    store.queryHistory(params).then(r => {      setLoading(false)      caluChart(r)    })  }  return (    <Spin spinning={loading}>      <div className={s.his}>        <div className={s.fun}>          {dateList.map((item,i)=>            <i key={i} className={sel===i?'sel':''} onClick={()=>doSelRange(item.key,i)}>{item.val}</i>          )}          <div className={s.wrap}>            <span onClick={doQuery}>查询</span>          </div>        </div>        <div className={s.chart}>          <HighchartsReact highcharts={Highcharts} options={option} />        </div>              </div>    </Spin>  );}export default observer(Run)